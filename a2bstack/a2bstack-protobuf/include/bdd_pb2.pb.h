/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.2 at Thu Apr 14 15:12:26 2022. */
/* This auto generated file from protobuf is modified to optimize the memory.
USER'S ARE NOT SUPPOSE TO MODIFY THIS
*/

#ifndef PB_BDD_PB2_PB_H_INCLUDED
#define PB_BDD_PB2_PB_H_INCLUDED
#include <pb.h>
#include "a2b\conf.h"
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _bdd_nodePowerMode {
    bdd_nodePowerMode_SLAVE_BUS_POWERED = 0,
    bdd_nodePowerMode_SLAVE_LOCAL_POWERED = 1
} bdd_nodePowerMode;

typedef enum _bdd_NodeType {
    bdd_NODE_TYPE_UNKNOWN = 0,
    bdd_NODE_TYPE_MASTER = 1,
    bdd_NODE_TYPE_SLAVE = 2
} bdd_NodeType;

typedef enum _bdd_DiscoveryMode {
    bdd_DISCOVERY_MODE_SIMPLE = 0,
    bdd_DISCOVERY_MODE_MODIFIED = 1,
    bdd_DISCOVERY_MODE_OPTIMIZED = 2,
    bdd_DISCOVERY_MODE_ADVANCED = 3
} bdd_DiscoveryMode;

typedef enum _bdd_ConfigMethod {
    bdd_CONFIG_METHOD_AUTO = 0,
    bdd_CONFIG_METHOD_BDD = 1,
    bdd_CONFIG_METHOD_HYBRID = 2
} bdd_ConfigMethod;

typedef enum _bdd_ConfigPriority {
    bdd_CONFIG_PRIORITY_AUTO = 0,
    bdd_CONFIG_PRIORITY_BDD = 1
} bdd_ConfigPriority;

typedef enum _bdd_ConfigErrPolicy {
    bdd_CONFIG_ERR_POLICY_FATAL = 0,
    bdd_CONFIG_ERR_POLICY_ERROR = 1,
    bdd_CONFIG_ERR_POLICY_WARN = 2,
    bdd_CONFIG_ERR_POLCIY_NONE = 3
} bdd_ConfigErrPolicy;

/* Struct definitions */
typedef struct _bdd_CtrlRegs {
    uint32_t bcdnslots;
    uint32_t ldnslots;
    uint32_t lupslots;
    uint32_t dnslots;
    uint32_t upslots;
    uint32_t respcycs;
    uint32_t slotfmt;
    uint32_t suscfg;
    uint32_t datctl;
    uint32_t control;

    bool has_bcdnslots;
    bool has_ldnslots;
    bool has_lupslots;
    bool has_dnslots;
    bool has_upslots;
    bool has_respcycs;
    bool has_slotfmt;
    bool has_suscfg;
    bool has_datctl;
    bool has_control;

} bdd_CtrlRegs;

typedef struct _bdd_CustomNodeIdSettings {
	uint32_t bCustomNodeIdAuth;
	uint32_t bReadFrmMemory;
	uint32_t bReadFrmCommCh;
	uint32_t nDeviceAddr;
    char nNodeId[64];
	uint32_t nNodeIdLength;
	uint32_t nReadMemAddrWidth;
	uint32_t nReadMemAddr;
	uint32_t bReadGpioPins;
    pb_size_t aGpio_count;
	uint32_t aGpio[8];
	uint32_t nTimeOut;
	uint32_t nRetryCnt;

    bool has_bCustomNodeIdAuth;
    bool has_bReadFrmMemory;
    bool has_bReadFrmCommCh;
    bool has_nDeviceAddr;
    bool has_nNodeId;
    bool has_nNodeIdLength;
    bool has_nReadMemAddrWidth;
    bool has_nReadMemAddr;
    bool has_bReadGpioPins;
    bool has_nTimeOut;
    bool has_nRetryCnt;
} bdd_CustomNodeIdSettings;

typedef struct _bdd_DataSlotEnhancementRegs {
    uint32_t upmask0;
    uint32_t upmask1;
    uint32_t upmask2;
    uint32_t upmask3;
    uint32_t upoffset;
    uint32_t dnmask0;
    uint32_t dnmask1;
    uint32_t dnmask2;
    uint32_t dnmask3;
    uint32_t dnoffset;


    bool has_upmask0;
    bool has_upmask1;
    bool has_upmask2;
    bool has_upmask3;
    bool has_upoffset;
    bool has_dnmask0;
    bool has_dnmask1;
    bool has_dnmask2;
    bool has_dnmask3;
    bool has_dnoffset;
} bdd_DataSlotEnhancementRegs;

typedef struct _bdd_GpioDRegs {
    uint32_t gpioden;
    uint32_t gpiod0msk;
    uint32_t gpiod1msk;
    uint32_t gpiod2msk;
    uint32_t gpiod3msk;
    uint32_t gpiod4msk;
    uint32_t gpiod5msk;
    uint32_t gpiod6msk;
    uint32_t gpiod7msk;
    uint32_t gpioddat;
    uint32_t gpiodinv;

    bool has_gpioden;
    bool has_gpiod0msk;
    bool has_gpiod1msk;
    bool has_gpiod2msk;
    bool has_gpiod3msk;
    bool has_gpiod4msk;
    bool has_gpiod5msk;
    bool has_gpiod6msk;
    bool has_gpiod7msk;
    bool has_gpioddat;
    bool has_gpiodinv;
} bdd_GpioDRegs;

typedef struct _bdd_I2cI2sRegs {
    uint32_t i2ccfg;
    uint32_t pllctl;
    uint32_t i2sgcfg;
    uint32_t i2scfg;
    uint32_t i2srate;
    uint32_t i2stxoffset;
    uint32_t i2srxoffset;
    uint32_t syncoffset;
    uint32_t pdmctl;
    uint32_t errmgmt;
    uint32_t i2srrate;
    uint32_t i2srrctl;
    uint32_t i2srrsoffs;
    uint32_t pdmctl2;

    bool has_i2ccfg;
    bool has_pllctl;
    bool has_i2sgcfg;
    bool has_i2scfg;
    bool has_i2srate;
    bool has_i2stxoffset;
    bool has_i2srxoffset;
    bool has_syncoffset;
    bool has_pdmctl;
    bool has_errmgmt;
    bool has_i2srrate;
    bool has_i2srrctl;
    bool has_i2srrsoffs;
    bool has_pdmctl2;
} bdd_I2cI2sRegs;

typedef struct _bdd_IntRegs {
	uint32_t intmsk0;
	uint32_t intmsk1;
	uint32_t intmsk2;
	uint32_t becctl;

    bool has_intmsk0;
    bool has_intmsk1;
    bool has_intmsk2;
    bool has_becctl;
} bdd_IntRegs;

typedef struct _bdd_MailboxRegs {
	uint32_t mbox0ctl;
	uint32_t mbox1ctl;

    bool has_mbox0ctl;
    bool has_mbox1ctl;
} bdd_MailboxRegs;

typedef struct _bdd_MetaData {
    uint32_t date;
    uint32_t version;
    char author[64];
    char organization[64];
    char company[64];
    uint32_t bddVersion;
    bool has_author;
    bool has_organization;
    bool has_company;
    bool has_bddVersion;
} bdd_MetaData;

typedef struct _bdd_NetworkPolicy {
    bdd_DiscoveryMode discoveryMode;
    bdd_ConfigMethod cfgMethod;
    bdd_ConfigPriority cfgPriority;
    bdd_ConfigErrPolicy cfgErrPolicy;
    bool has_has_common_SSSettings;
    bool has_common_SSSettings;
    bool has_discoveryStartDelay;
    uint32_t discoveryStartDelay;
    bool has_bCrossTalkFixApply;
    bool bCrossTalkFixApply;
} bdd_NetworkPolicy;

typedef struct _bdd_NodeSettings {
    bool has_bLocalPwrd;
    bdd_nodePowerMode bLocalPwrd;
} bdd_NodeSettings;

typedef struct _bdd_PinIoRegs {
    uint32_t clkcfg;
    uint32_t gpiooen;
    uint32_t gpioien;
    uint32_t pinten;
    uint32_t pintinv;
    uint32_t pincfg;
    uint32_t gpiodat;
    uint32_t clk1cfg;
    uint32_t clk2cfg;

    bool has_clkcfg;
    bool has_gpiooen;
    bool has_gpioien;
    bool has_pinten;
    bool has_pintinv;
    bool has_pincfg;
    bool has_gpiodat;
    bool has_clk1cfg;
    bool has_clk2cfg;
} bdd_PinIoRegs;

typedef struct _bdd_TuningRegs {
	uint32_t vregctl;
	uint32_t txactl;
	uint32_t rxactl;
	uint32_t txbctl;
	uint32_t rxbctl;

    bool has_vregctl;
    bool has_txactl;
    bool has_rxactl;
    bool has_txbctl;
    bool has_rxbctl;
} bdd_TuningRegs;

typedef struct _bdd_NodeDescriptor {
    uint32_t vendor;
    uint32_t product;
    uint32_t version;
    bool has_oCustomNodeIdSettings;
    bdd_CustomNodeIdSettings oCustomNodeIdSettings;
    bool has_bIsAnalyzer;
	uint32_t bIsAnalyzer;
} bdd_NodeDescriptor;

typedef struct _bdd_Node {
    bdd_NodeType nodeType;
    bdd_CtrlRegs ctrlRegs;
    bdd_IntRegs intRegs;
    bdd_TuningRegs tuningRegs;
    bdd_I2cI2sRegs i2cI2sRegs;
    bdd_PinIoRegs pinIoRegs;
    bool ignEeprom;
    bool verifyNodeDescr;
    bdd_NodeDescriptor nodeDescr;
    uint32_t downstreamBcastCnt;
    pb_size_t downstream_count;
    uint32_t downstream[32];
    uint32_t upstreamBcastCnt;
    pb_size_t upstream_count;
    uint32_t upstream[32];
    bdd_DataSlotEnhancementRegs slotEnh;
    bdd_GpioDRegs gpioDist;
    bdd_MailboxRegs mbox;
    bdd_NodeSettings nodeSetting;

    bool has_intRegs;
    bool has_tuningRegs;
    bool has_slotEnh;
    bool has_gpioDist;
    bool has_mbox;
    bool has_nodeSetting;
} bdd_Node;

typedef struct _bdd_Network {
    bdd_MetaData metaData;
    uint32_t masterAddr;
    bdd_NetworkPolicy policy;
    pb_size_t nodes_count;
    bdd_Node nodes[A2B_CONF_MAX_NUM_SLAVE_NODES+1]; // +1 for master
    uint32_t sampleRate;
} bdd_Network;

/* Default values for struct fields */
extern const uint32_t bdd_MetaData_bddVersion_default;


/* Struct field encoding specification for nanopb */
extern const pb_field_t bdd_MetaData_fields[7];
extern const pb_field_t bdd_CustomNodeIdSettings_fields[13];
extern const pb_field_t bdd_NodeDescriptor_fields[6];
extern const pb_field_t bdd_CtrlRegs_fields[11];
extern const pb_field_t bdd_IntRegs_fields[5];
extern const pb_field_t bdd_TuningRegs_fields[6];
extern const pb_field_t bdd_I2cI2sRegs_fields[15];
extern const pb_field_t bdd_PinIoRegs_fields[10];
extern const pb_field_t bdd_DataSlotEnhancementRegs_fields[11];
extern const pb_field_t bdd_GpioDRegs_fields[12];
extern const pb_field_t bdd_MailboxRegs_fields[3];
extern const pb_field_t bdd_NodeSettings_fields[2];
extern const pb_field_t bdd_Node_fields[18];
extern const pb_field_t bdd_NetworkPolicy_fields[8];
extern const pb_field_t bdd_Network_fields[6];



#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
